#!/usr/bin/env python

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

import sys
import argparse


def vf_write(arg_list):

    t = ' ' * 4

    '''
    Process args and write corresponding Vagrantfile to STDOUT
    '''
    box = arg_list.box
    name = arg_list.name
    namecount = int(arg_list.namecount)
    address = arg_list.address
    memory = arg_list.memory
    primary = arg_list.primary
    dockerimage = arg_list.dockerimage
    dockerfilebuild = arg_list.dockerfilebuild

    provider = {}

    localfiles = {}
    remotefiles = {}

    localdirs = {}
    remotedirs = {}

    hostports = {}
    guestports = {}

    strings = {}
    shells = {}
    ansibles = {}

    if arg_list.providers:

        for thisprovider in arg_list.providers:

            var = thisprovider.split(":")
            providerhostname = var[0]
            aprovider =  var[1]
            provider[providerhostname] = aprovider

    if arg_list.copyfiles:

        for copyfile in arg_list.copyfiles:

            var = copyfile.split(":")
            filehostname = var[0]
            localfile =  var[1]
            remotefile = var[2]
            localfiles[filehostname] = localfile
            remotefiles[filehostname] = remotefile

    if arg_list.sync:

        for syncdir in arg_list.sync:

            var = syncdir.split(":")
            synchostname = var[0]
            localdir =  var[1]
            remotedir = var[2]
            localdirs[synchostname] = localdir
            remotedirs[synchostname] = remotedir

    if arg_list.string:

        for thisstring in arg_list.string:

            var = thisstring.split(":")
            stringhostname = var[0]
            astring =  var[1]
            strings[stringhostname] = astring

    if arg_list.shell:

        for thisshell in arg_list.shell:

            var = thisshell.split(":")
            shellhostname = var[0]
            ashell =  var[1]
            shells[shellhostname] = ashell

    if arg_list.ports:

        for theseports in arg_list.ports:

            var = theseports.split(":")
            porthostname = var[0]
            hostport =  var[1]
            guestport =  var[2]
            hostports[porthostname] = hostport 
            guestports[porthostname] = guestport

    if arg_list.ansible:

        for thisansible in arg_list.ansible:

            var = thisansible.split(":")
            ansiblehostname = var[0]
            ansiblevar =  var[1]
            ansibles[ansiblehostname] = ansiblevar

    if arg_list.ansible:

        for thisansible in arg_list.ansible:

            var = thisansible.split(":")
            ansiblehostname = var[0]
            ansiblevar =  var[1]
            ansibles[ansiblehostname] = ansiblevar

    overs = {}
    override = {}
    obox = {}
    oaddress = {}
    omemory = {}
    oname = {}

    if arg_list.override:

        for ovrde in arg_list.override:

            var = ovrde.split(":")
            overridename = var[0]
            oconfig =  var[1]
            ovalue = var[2]

            if oconfig == 'box':
                obox[overridename] = ovalue
            if oconfig == 'address':
                oaddress[overridename] = ovalue
            if oconfig == 'memory':
                omemory[overridename] = ovalue
            if oconfig == 'name':
                oname[overridename] = ovalue
                
    # Begin to write Vagrantfile
    print '## Command used to generate Vagrantfile:' + str(sys.argv)
    print 'Vagrant.configure("2") do |config|'

    # Create a base config for hosts ([make sure you have the necessary RAM)
    for i in range (0,namecount):

        # Increment the IP
        address = ip_inc(address)
        # Add to the name prefix
        vmname = name + str(i)

        # Test to see if this is a primary box in a multi environment
        if vmname == primary:
            pribox = ", primary: true"
        else:
            pribox = ""

        if (vmname in provider):
            providerline = '''config.vm.provider "''' + provider[vmname] + '''" do |p|'''
            if ((provider[vmname] == 'docker') and (dockerimage)):
                providerline = providerline + '''\n''' + (t * 3) + '''p.image = "''' + dockerimage + '''"''' 
            if ((provider[vmname] == 'docker') and (dockerfilebuild)):
                providerline = providerline + '''\n''' + (t * 3) + '''p.build_dir = "."''' 
        elif ('ALL' in provider):
            providerline = '''config.vm.provider "''' + provider['ALL'] + '''" do |p|'''
            if ((provider[vmname] == 'docker') and (dockerimage)):
                providerline = providerline + '''\n''' + (t * 3) + '''p.image = "''' + dockerimage + '''"''' 
            if ((provider[vmname] == 'docker') and (dockerfilebuild)):
                providerline = providerline + '''\n''' + (t * 3) + '''p.build_dir = ."''' 
        else:
            providerline = '''config.vm.provider "virtualbox" do |p|'''

        # Test to see if we have shell provisioning
        if (vmname in shells):
            shellline = '''    config.vm.provision "shell", path: "''' + shells[vmname] + '''"\n''' 
        elif ('ALL' in shells):
            shellline = '''    config.vm.provision "shell", path: "''' + shells['ALL'] + '''"\n'''
        else:
            shellline = ""

        # Test to see if we have ansible provisioning
        if (vmname in ansibles):
            ansibleline = '''    config.vm.provision "ansible" do |ansible|
            ansible.playbook = "''' + ansibles[vmname] + '''"
        end\n'''
        elif ('ALL' in ansibles):
            ansibleline = '''    config.vm.provision "ansible" do |ansible|
            ansible.playbook = "''' + ansibles['ALL'] + '''"
        end\n'''
        else:
            ansibleline = ''

        # These are file values
        if (vmname in localfiles and vmname in remotefiles): 
            fileline = '''    config.vm.provision "file", source: "%s", destination: "%s" '''%(localfiles[vmname],remotefiles[vmname]) + '''\n'''
        elif ('ALL' in localfiles and 'ALL' in remotefiles):
            fileline = '''    config.vm.provision "file", source: "%s", destination: "%s" '''%(localfiles['ALL'],remotefiles['ALL']) + '''\n'''
        else:
            fileline = ""

        # These are syncdir values
        if (vmname in localdirs and vmname in remotedirs): 
            syncdirline = '''    config.vm.synced_folder "%s", "%s" '''%(localdirs[vmname],remotedirs[vmname]) + '''\n'''
        elif ('ALL' in localdirs and 'ALL' in remotedirs):
            syncdirline = '''    config.vm.synced_folder "%s", "%s" '''%(localdirs['ALL'],remotedirs['ALL']) + '''\n'''
        else:
            syncdirline = ""

        # These are port values
        if (vmname in hostports  and vmname in guestports): 
            portline = '''    config.vm.network "forwarded_port", guest: "%s", host: "%s" '''%(hostports[vmname],guestports[vmname]) + '''\n'''
        else:
            portline = ""

        # These are string values
        if (vmname in strings): 
            stringline = strings[vmname] + '''\n'''
        elif ('ALL' in strings):
            stringline = strings['ALL'] + '''\n'''
        else:
            stringline = ""

        # These are overridden values
        if vmname not in obox:
            obox[vmname] = box
        if vmname not in oname:
            oname[vmname] = vmname
        if vmname not in omemory:
            omemory[vmname] = memory
        if vmname not in oaddress:
            oaddress[vmname] = address

        print '''\n    config.vm.define :%s%s do |%s_config|
        %s_config.vm.box = "%s"
        %s_config.vm.hostname = "%s"
        %s_config.vm.network :private_network, ip: "%s"
        %s_%s
            p.memory = "%s"
        end'''%(oname[vmname], 
        pribox, 
        oname[vmname], 
        oname[vmname], 
        obox[vmname], 
        oname[vmname], 
        oname[vmname], 
        oname[vmname], 
        oaddress[vmname], 
        oname[vmname], 
        providerline,
        omemory[vmname])
        if fileline:
            print t + fileline,
        if portline:
            print t + portline,
        if shellline:
            print t + shellline,
        if ansibleline:
            print t + ansibleline,
        if stringline:
            print t + stringline,
        if syncdirline:
            print t + syncdirline,
        print t + "end"
    print "\nend"

# Add to the final tuple
def ip_inc(ip):
    tup1,tup2,tup3,tup4 = ip.split(".");
    tup4 = str(int(tup4) + 1); 
    return '.'.join([tup1,tup2,tup3,tup4]) 
    
def main():

    # Let us parse our args 
    parser = argparse.ArgumentParser(description='Utility to speed up creation of Vagrantfiles')

    parser.add_argument("-n", "--name", help='The name (or prefix) name(s) of the host(s).  This is a REQUIRED option') 
    parser.add_argument("-b", "--box", help='The VM OS you want - note this needs to be available in Vagrantcloud.  The default is centos/7',default='centos/7') 
    parser.add_argument("-c", "--namecount", help='The number of VMs desired prefix named with value of name', default='1') 
    parser.add_argument("-p", "--primary", help='Specify the primary box in a multi box environment') 
    parser.add_argument("-a", "--address", help='The IP address start for this host or list of hosts', default='10.0.100.10') 
    parser.add_argument("-m", "--memory", help='The amount of memory to allocate in MB.  The default is 256MB',default='256') 
    parser.add_argument("-f", "--copyfiles", help='Upload a file or directory to the guest from the host.  Specified in the form of hostname:localfile:remotefile, where hostname can be special value of ALL',nargs='*') 
    parser.add_argument("--sync", help='Sync directory to the guest from the host.  Specified in the form of hostname:localdir:remotedir, where hostname can be special value of ALL',nargs='*') 
    parser.add_argument("--ports", help='Forward ports from host to guest machines.  The format is hostname:guestport:hostport', nargs='*') 
    parser.add_argument("--shell", help='Enable basic shell provisioning [inline type], specified in the form hostname:inline_string where hostname can be ALL and string is quoted', nargs='*') 
    parser.add_argument("--ansible", help='Enable basic ansible provisioning [inline type], specified in the form hostname:inline_string where hostname can be ALL and string is quoted', nargs='*') 
    parser.add_argument("--providers", help='Specify alternate providers, including Docker provider.  The format is hostname:inline_string where hostname can be ALL.  The default is Virtualbox', nargs='*' ) 
    parser.add_argument("--dockerimage", help='If provider is Docker specify the image.  This image can be from any Docker registry.  The default is alpine', default='alpine') 
    parser.add_argument("--dockerfilebuild", help='If provider is Docker Build a dockerfile in the same directory as the Vagrantfile', default='True') 
    parser.add_argument("-o", "--override", help='Overrides named host values with other values starting with host name, value name, and the value itself, in the form of "hostname:memory:1024" for example.  Currently the following overrides are supported: box, name, memory, address',nargs='*') 
    parser.add_argument("-s", "--string", help='Write some arbitrary string (not covered by other option).  Specified in the form of hostname:string where hostname can be ALL and string is quoted',nargs='*') 

    # Enable docker provider support - https://www.vagrantup.com/docs/docker/basics.html

    args = parser.parse_args()

    # Check to see if we have any args at all
    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(1)

    vf_write(args);

if __name__ == "__main__":
  main()
